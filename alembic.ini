# A generic, single database configuration.

[alembic]
# path to migration scripts
# Use forward slashes (/) also on windows to provide an os agnostic path
script_location = alembic

# template for migration file names, example: %%(rev)s_%%(slug)s.py
# "%(year)d_%(month).2d_%(day).2d_%(hour).2d%(minute).2d-%(rev)s-%(slug)s.py"
# "%(rev)s_%(slug)s.py"
file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# E.g. "America/New_York"
# timezone =

# sys.path path, will be prepended to sys.path if present.
# defaults to . if not specified.
#prepend_sys_path = .

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %%(levelname)-5.5s [%%(name)s] %%(message)s
datefmt = %%H:%%M:%%S

# revision identifiers, used by Alembic.
# new revisions shouldn't be added directly here, but rather generated by
# the `alembic revision` command.

# the initial revision setting is configuring the starting rev for
# systems that need to start from a blank database.  This is typically
# a single string value.   If this is a brand new Alembic environment,
# it is safe to leave this commented out.   If this is a Alembic environment
# that is part of a larger application that already has its own revisioning
# system, this is one place to help bridge between the two.   See the
# documentation for "Branching" for a full description of how this
# parameter may be used.
# For a multiple database migration environment, the format is a space
# separated list of "label@revision", e.g. "engine1@abc engine2@def"
# initial_revision =

# set to 'true' to run the environment script unconditionally,
# even if the migration database is not available.
# leave False in most cases.
# sourceless = false

# the SQLAlchemy URL for the database, indicating the database engine
# and connection arguments.  The format here is the same as that used by
# SQLAlchemy's create_engine() function.  A URL is typically formatted
# as:
#
#   driver://user:pass@host/dbname?query_string
#
# The sqlalchemy.url parameter is normally entered directly here.
#
# For a multiple database migration environment, a series of named URLs
# may be provided.   A dictionary structure is accepted here,
# for example::
#
#   [alembic:exclude_tables]
#   foo.bat, bar.qux
#
#   [my_important_database]
#   sqlalchemy.url = driver://user:pass@host/dbname
#
#   [my_other_database]
#   sqlalchemy.url = driver://user:pass@host/dbname
#
# ... where "my_important_database" and "my_other_database" are
# symbolic names that are referred to by the environment script.
#
sqlalchemy.url = %(DB_CONNECTION_URL)s
# sqlalchemy.url = driver://user:pass@host/database

# Other parameters unique to the Alembic environment context.
# ...
# multi-tenancy support.  A value of "true" indicates that the application
# supports running migrations for different tenants, where each tenant
# has its own version history.   Requires that the env.py script
# implements context.configure() using the "version_table_schema" parameter.
#
# version_table_schema =

# set true to output version numbers to stdout
# print_stdout = true

# Post-write hooks are Python functions that are run after a migration
# script is generated.   Each hook is expressed as a `key = value` pair
# where `key` is a symbolic name and `value` is a Python callable using
# dotted-object notation, e.g. `my.package:my_function`.
#
# The `type` setting is a comma-separated list of hook types to run.
# Valid values are:
#   `render`: called after a new migration file is rendered
#   `write`: called after a new migration file is written to disk
#   `edit`: called after a new migration file is passed to the editor
#
# All hooks are passed the following arguments:
#   `filename`: the filename of the migration script
#   `options`: the options passed to the `alembic revision` command
#
# Only `render` hooks receive the `autogen_context` argument:
#   `autogen_context`: the context dictionary used to render the template
#
# The `truncate_large_batch_op_output` is an optional post write hook that is
# part of Alembic.  It is useful for environments that use batch mode
# and may produce very large output files.  It will truncate the
# output of `op.bulk_insert()` and other batch-mode operations
# to a configurable number of lines.
#
#[post_write_hooks]
#hooks = myhook
#myhook.type = render, write
#myhook.callable = my.package:my_function
#myhook.kwargs = foo=bar, baz=quux

# an example hook that truncates the output of batch operations
# to 50 lines.
#hooks = truncate_op_output
#truncate_op_output.type = render
#truncate_op_output.truncate_large_batch_op_output = 50
#truncate_op_output.callable = alembic.util.truncate_large_batch_op_output
#
# to disable truncation of batch operations comment out the previous
# line and uncomment the following:
#truncate_op_output.truncate_large_batch_op_output = 0
