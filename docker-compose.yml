# =============================================================================
# Improved Docker Compose with Better Resource Management
# =============================================================================
services:
  # =============================================================================
  # Memory MCP Application Server
  # =============================================================================
  memory-mcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: memory-mcp-server
    restart: unless-stopped
    
    # Environment variables
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-memory_mcp}
      - DB_USER=${DB_USER:-memory_user}
      - DB_PASSWORD=${DB_PASSWORD}
      # MCP Server Configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-4200}
      - API_SERVER_PORT=${API_SERVER_PORT:-8000}
      - MCP_BASE_URL=${MCP_BASE_URL:-http://localhost:4200}
      # Qdrant Configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=${QDRANT_COLLECTION_NAME:-memories}
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-true}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-memory_mcp}
      # Authentication
      - AUTH_SECRET_KEY=${AUTH_SECRET_KEY}
      - AUTH_ACCESS_TOKEN_EXPIRE_MINUTES=${AUTH_ACCESS_TOKEN_EXPIRE_MINUTES:-120}
      # Memory Configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - MEMORY_SCORE_THRESHOLD=${MEMORY_SCORE_THRESHOLD:-0.40}
      - MEMORY_UPPER_SCORE_THRESHOLD=${MEMORY_UPPER_SCORE_THRESHOLD:-0.98}
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # RabbitMQ Configuration
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      # Celery Configuration
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Connection pool settings
      - SQLALCHEMY_POOL_SIZE=20
      - SQLALCHEMY_MAX_OVERFLOW=40
      - SQLALCHEMY_POOL_TIMEOUT=30
    
    # Port mapping
    ports:
      - "${API_SERVER_PORT:-8000}:8000"
      - "${MCP_SERVER_PORT:-4200}:4200"
    
    # Improved health check with simple port check
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c '</dev/tcp/localhost/8000' && timeout 3 bash -c '</dev/tcp/localhost/4200' || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    
    # Dependencies
    depends_on:
      - postgres
      - qdrant
      - rabbitmq
      - redis
    
    # Networks
    networks:
      - memory-mcp-network

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: memory-mcp-postgres
    restart: unless-stopped
    
    # Port mapping for external access
    ports:
      - "${DB_PORT:-5432}:5432"
    
    # Environment variables
    environment:
      POSTGRES_DB: ${DB_NAME:-memory_mcp}
      POSTGRES_USER: ${DB_USER:-memory_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-memory_user} -d ${DB_NAME:-memory_mcp}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    
    # Networks
    networks:
      - memory-mcp-network

  # =============================================================================
  # Qdrant Vector Database
  # =============================================================================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: memory-mcp-qdrant
    restart: unless-stopped
    
    
    # Volumes
    volumes:
      - qdrant_data:/qdrant/storage
    
    # Health check for Qdrant
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -c 'echo > /dev/tcp/localhost/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    
    # Networks
    networks:
      - memory-mcp-network

  # =============================================================================
  # RabbitMQ Message Broker
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.13-alpine
    container_name: memory-mcp-rabbitmq
    restart: unless-stopped
    
    # Use anonymous volume to avoid permission issues
    volumes:
      - /var/lib/rabbitmq
    
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
      RABBITMQ_NODENAME: rabbit@rabbitmq
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE:-secretcookie}
    
    networks:
      - memory-mcp-network
    
    # Health check for RabbitMQ
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # =============================================================================
  # Redis Cache & Celery Backend
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: memory-mcp-redis
    restart: unless-stopped
    
    
    volumes:
      - redis_data:/data
    
    command: redis-server --save 60 1 --loglevel warning --maxmemory 256mb --maxmemory-policy allkeys-lru --stop-writes-on-bgsave-error no
    
    networks:
      - memory-mcp-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # =============================================================================
  # Celery Worker
  # =============================================================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
      target: production
    container_name: memory-mcp-celery-worker
    restart: unless-stopped
    
    command: celery -A src.celery_app worker --loglevel=info --concurrency=4 --without-gossip --without-mingle --without-heartbeat
    
    environment:
      - PYTHONPATH=/app
      - SKIP_MIGRATIONS=true
      # Celery Configuration
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-memory_mcp}
      - DB_USER=${DB_USER:-memory_user}
      - DB_PASSWORD=${DB_PASSWORD}
      # MCP Configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-4200}
      - API_SERVER_PORT=${API_SERVER_PORT:-8000}
      - MCP_BASE_URL=${MCP_BASE_URL:-http://localhost:4200}
      # Qdrant Configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # AI Services
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - qdrant
    
    networks:
      - memory-mcp-network
    
    # Health check for Celery worker
    healthcheck:
      test: ["CMD-SHELL", "celery -A src.celery_app inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # =============================================================================
  # Frontend (Astro + React) with Improved Resources
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - FRONTEND_URL=${FRONTEND_URL:-http://localhost:4321}
        - BACKEND_URL=http://memory-mcp:8000
        - MCP_URL=http://memory-mcp:4200
    container_name: memory-mcp-frontend
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${FRONTEND_PORT:-80}:80"
    
    # Health check with wget
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    
    # Dependencies - wait for backend to be healthy
    depends_on:
      - memory-mcp
    
    # Networks
    networks:
      - memory-mcp-network

# =============================================================================
# Networks
# =============================================================================
networks:
  memory-mcp-network:
    driver: bridge
    name: memory-mcp-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: memory-mcp-postgres-data
  
  qdrant_data:
    driver: local
    name: memory-mcp-qdrant-data
  
  redis_data:
    driver: local
    name: memory-mcp-redis-data