# =============================================================================
# Nginx Configuration for Astro Frontend
# Optimized for production with caching, compression, API proxying, and security
# =============================================================================

worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=200r/m;
    limit_req_zone $binary_remote_addr zone=general_limit:10m rate=300r/m;
    limit_req_zone $binary_remote_addr zone=mcp_limit:10m rate=100r/m;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Logging
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    # More restrictive CSP for production security
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https: wss:; frame-ancestors 'self';" always;

    # Hide nginx version
    server_tokens off;

    server {
        # coolify handles 443 to 80 redirect
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Security: Disable access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # API proxy to backend with rate limiting
        location /api/ {
            # Apply generous rate limiting for API routes
            limit_req zone=api_limit burst=20 nodelay;
            limit_req_status 429;
            
            # Remove /api prefix and proxy to backend
            rewrite ^/api/(.*)$ /$1 break;
            
            # Proxy settings
            proxy_pass http://memory-mcp:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # MCP server proxy with rate limiting
        location /mcp/ {
            # Apply rate limiting for MCP routes
            limit_req zone=mcp_limit burst=10 nodelay;
            limit_req_status 429;
            
            # Proxy settings for MCP server (preserve /mcp/ prefix)
            proxy_pass http://memory-mcp:4200;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Static assets caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # HTML files - no cache for dynamic content
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Main application routing with general rate limiting
        location / {
            # Apply general rate limiting
            limit_req zone=general_limit burst=50 nodelay;
            limit_req_status 429;
            
            try_files $uri $uri/ $uri.html /index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # 404 error page
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }

        # 50x error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
} 